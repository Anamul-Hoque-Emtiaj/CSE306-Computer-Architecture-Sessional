
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a9  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000517  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000253  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d9  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  000011e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
	// Some pins of PORTC can not be used for I/O directly.
	// turn of JTAG to use them
	// o write a 1 to the JTD bit twice consecutively to turn it off
	MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  6c:	80 e8       	ldi	r24, 0x80	; 128
  6e:	84 bf       	out	0x34, r24	; 52
  70:	84 bf       	out	0x34, r24	; 52
	DDRA = 0x1F;				// ALUOp A[7:5]
  72:	8f e1       	ldi	r24, 0x1F	; 31
  74:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;				// A[3:0], B[7:4]
  76:	17 ba       	out	0x17, r1	; 23
	DDRC = 0x8f;				// C[7] - Zero Flag | C[3:0] - Output
  78:	8f e8       	ldi	r24, 0x8F	; 143
  7a:	84 bb       	out	0x14, r24	; 20

//		PORTC = out;
//	}


out = 0;
  7c:	90 e0       	ldi	r25, 0x00	; 0
while (1)
	{
			
		control_bits = (PINA >> 5) & 0x07;
  7e:	29 b3       	in	r18, 0x19	; 25
  80:	22 95       	swap	r18
  82:	26 95       	lsr	r18
  84:	27 70       	andi	r18, 0x07	; 7

		in1 = PINB & 0x0f;
  86:	36 b3       	in	r19, 0x16	; 22
  88:	83 2f       	mov	r24, r19
  8a:	8f 70       	andi	r24, 0x0F	; 15
		in2 = (PINB & 0xf0) >> 4;
  8c:	36 b3       	in	r19, 0x16	; 22
  8e:	32 95       	swap	r19
  90:	3f 70       	andi	r19, 0x0F	; 15

		if(control_bits == 0) {
  92:	21 11       	cpse	r18, r1
  94:	03 c0       	rjmp	.+6      	; 0x9c <main+0x30>
			out = in1 & in2;
  96:	98 2f       	mov	r25, r24
  98:	93 23       	and	r25, r19
  9a:	26 c0       	rjmp	.+76     	; 0xe8 <main+0x7c>
			} else if(control_bits == 1){
  9c:	21 30       	cpi	r18, 0x01	; 1
  9e:	19 f4       	brne	.+6      	; 0xa6 <main+0x3a>
			out = in1 | in2;
  a0:	98 2f       	mov	r25, r24
  a2:	93 2b       	or	r25, r19
  a4:	21 c0       	rjmp	.+66     	; 0xe8 <main+0x7c>
			} else if(control_bits == 2) {
  a6:	22 30       	cpi	r18, 0x02	; 2
  a8:	19 f4       	brne	.+6      	; 0xb0 <main+0x44>
			out = in1 + in2;
  aa:	98 2f       	mov	r25, r24
  ac:	93 0f       	add	r25, r19
  ae:	1c c0       	rjmp	.+56     	; 0xe8 <main+0x7c>
			} else if(control_bits == 3) {
  b0:	23 30       	cpi	r18, 0x03	; 3
  b2:	19 f4       	brne	.+6      	; 0xba <main+0x4e>
			out = in1 - in2;
  b4:	98 2f       	mov	r25, r24
  b6:	93 1b       	sub	r25, r19
  b8:	17 c0       	rjmp	.+46     	; 0xe8 <main+0x7c>
			} else if(control_bits == 4) {
  ba:	24 30       	cpi	r18, 0x04	; 4
  bc:	21 f4       	brne	.+8      	; 0xc6 <main+0x5a>
			out = ~(in1 | in2);
  be:	38 2b       	or	r19, r24
  c0:	93 2f       	mov	r25, r19
  c2:	90 95       	com	r25
  c4:	11 c0       	rjmp	.+34     	; 0xe8 <main+0x7c>
			} else if(control_bits == 6) {
  c6:	26 30       	cpi	r18, 0x06	; 6
  c8:	31 f4       	brne	.+12     	; 0xd6 <main+0x6a>
			out = in1 << in2;
  ca:	98 2f       	mov	r25, r24
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <main+0x64>
  ce:	99 0f       	add	r25, r25
  d0:	3a 95       	dec	r19
  d2:	ea f7       	brpl	.-6      	; 0xce <main+0x62>
  d4:	09 c0       	rjmp	.+18     	; 0xe8 <main+0x7c>
			} else if(control_bits == 7) {
  d6:	27 30       	cpi	r18, 0x07	; 7
  d8:	39 f4       	brne	.+14     	; 0xe8 <main+0x7c>
			out = in1 >> in2;
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x76>
  de:	95 95       	asr	r25
  e0:	87 95       	ror	r24
  e2:	3a 95       	dec	r19
  e4:	e2 f7       	brpl	.-8      	; 0xde <main+0x72>
  e6:	98 2f       	mov	r25, r24
		}

		out = out & 0x0f;
  e8:	9f 70       	andi	r25, 0x0F	; 15
		if(!out) {
  ea:	09 f4       	brne	.+2      	; 0xee <main+0x82>
			out = out | 0x80;
  ec:	90 68       	ori	r25, 0x80	; 128
		}

		PORTC = out;
  ee:	95 bb       	out	0x15, r25	; 21
		
	}
  f0:	c6 cf       	rjmp	.-116    	; 0x7e <main+0x12>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
