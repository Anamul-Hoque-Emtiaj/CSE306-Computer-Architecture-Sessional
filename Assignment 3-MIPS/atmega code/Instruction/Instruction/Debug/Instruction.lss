
Instruction.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  000000e8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068e  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e3  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00001061  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000366  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000095  00000000  00000000  00001692  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001727  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  7a:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <rotateBinary>:
	0x9531,
	0xe225,
	0xc352
};

uint16_t rotateBinary(uint16_t number){
  82:	9c 01       	movw	r18, r24
	uint16_t res = 0;
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
	while(number>0){
  88:	09 c0       	rjmp	.+18     	; 0x9c <rotateBinary+0x1a>
		res=res<<1;
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
		res = res|(number & 1);
  8e:	a9 01       	movw	r20, r18
  90:	41 70       	andi	r20, 0x01	; 1
  92:	55 27       	eor	r21, r21
  94:	84 2b       	or	r24, r20
  96:	95 2b       	or	r25, r21
		number=number>>1;
  98:	36 95       	lsr	r19
  9a:	27 95       	ror	r18
	0xc352
};

uint16_t rotateBinary(uint16_t number){
	uint16_t res = 0;
	while(number>0){
  9c:	21 15       	cp	r18, r1
  9e:	31 05       	cpc	r19, r1
  a0:	a1 f7       	brne	.-24     	; 0x8a <rotateBinary+0x8>
		res=res<<1;
		res = res|(number & 1);
		number=number>>1;
	}
	return res;
}
  a2:	08 95       	ret

000000a4 <main>:
int main(void)
{
	// Some pins of PORTC can not be used for I/O directly.
	// turn of JTAG to use them
	// o write a 1 to the JTD bit twice consecutively to turn it off
	MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  a4:	80 e8       	ldi	r24, 0x80	; 128
  a6:	84 bf       	out	0x34, r24	; 52
  a8:	84 bf       	out	0x34, r24	; 52
	
	DDRB = 0x00;	// input pc
  aa:	17 ba       	out	0x17, r1	; 23
	
	// Instruction : D[7:0]C[7:0]
	DDRA = 0xFF;	// lower 8-bits of instruction
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;	// upper 8-bits of instruction
  b0:	84 bb       	out	0x14, r24	; 20
	
	uint8_t pc = -1;
  b2:	cf ef       	ldi	r28, 0xFF	; 255
	uint16_t instruction;
	/* Replace with your application code */
	while (1)
	{
		if (PINB != pc) {
  b4:	86 b3       	in	r24, 0x16	; 22
  b6:	c8 17       	cp	r28, r24
  b8:	e9 f3       	breq	.-6      	; 0xb4 <main+0x10>
			pc = PINB;
  ba:	c6 b3       	in	r28, 0x16	; 22
			instruction = INSTRUCTIONS[pc];
  bc:	ec 2f       	mov	r30, r28
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	ee 0f       	add	r30, r30
  c2:	ff 1f       	adc	r31, r31
  c4:	e0 5a       	subi	r30, 0xA0	; 160
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	90 81       	ld	r25, Z
  ca:	81 81       	ldd	r24, Z+1	; 0x01
			PORTA = (uint8_t) instruction & 0xff;
  cc:	9b bb       	out	0x1b, r25	; 27
			PORTC = (uint8_t) rotateBinary(instruction >> 8);
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 41 00 	call	0x82	; 0x82 <rotateBinary>
  d4:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	83 ed       	ldi	r24, 0xD3	; 211
  d8:	90 e3       	ldi	r25, 0x30	; 48
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x36>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x3c>
  e0:	00 00       	nop
  e2:	e8 cf       	rjmp	.-48     	; 0xb4 <main+0x10>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
