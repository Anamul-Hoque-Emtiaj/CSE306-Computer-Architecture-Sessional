
Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000000f0  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000689  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e3  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000290  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  7a:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <rotateBinary>:
#include <avr/io.h>
#include <util/delay.h>

uint16_t CONTROL_ROM[1<<4] = {0x230, 0x628, 0x430, 0x630, 0xE30, 0x5A8, 0xC30, 0x604, 0x602, 0x028, 0x448, 0x428, 0x030, 0x830, 0x228, 0x001};
	
uint8_t rotateBinary(uint8_t number){
  82:	98 2f       	mov	r25, r24
	uint8_t res = 0;
  84:	80 e0       	ldi	r24, 0x00	; 0
	while(number>0){
  86:	05 c0       	rjmp	.+10     	; 0x92 <rotateBinary+0x10>
		res=res<<1;
  88:	88 0f       	add	r24, r24
		res = res|(number & 1);
  8a:	29 2f       	mov	r18, r25
  8c:	21 70       	andi	r18, 0x01	; 1
  8e:	82 2b       	or	r24, r18
		number=number>>1;
  90:	96 95       	lsr	r25

uint16_t CONTROL_ROM[1<<4] = {0x230, 0x628, 0x430, 0x630, 0xE30, 0x5A8, 0xC30, 0x604, 0x602, 0x028, 0x448, 0x428, 0x030, 0x830, 0x228, 0x001};
	
uint8_t rotateBinary(uint8_t number){
	uint8_t res = 0;
	while(number>0){
  92:	91 11       	cpse	r25, r1
  94:	f9 cf       	rjmp	.-14     	; 0x88 <rotateBinary+0x6>
		res=res<<1;
		res = res|(number & 1);
		number=number>>1;
	}
	return res;
}
  96:	08 95       	ret

00000098 <main>:
int main(void)
{
	// Some pins of PORTC can not be used for I/O directly.
	// turn of JTAG to use them
	// o write a 1 to the JTD bit twice consecutively to turn it off
	MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	84 bf       	out	0x34, r24	; 52
  9c:	84 bf       	out	0x34, r24	; 52
	
	DDRB = 0x0F; // B[7:4] - Opcode Input
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	87 bb       	out	0x17, r24	; 23
	
	// Control Unit Bits : C[3:0]D[7:0]
	// C[alu_op[3], mem_to_reg[1]] D[mem_read[1], mem_write[1], reg_write[1], reg_dst[1], alu_src[1], branch_neq[1], branch[1], jump[1]]
	DDRC = 0xFF;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
  a6:	81 bb       	out	0x11, r24	; 17
	
	
	uint8_t opcode = ~0;
  a8:	cf ef       	ldi	r28, 0xFF	; 255
	
	while (1)
	{
		if (opcode != (0x0F & rotateBinary(PINB >> 4))) {
  aa:	86 b3       	in	r24, 0x16	; 22
  ac:	82 95       	swap	r24
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	0e 94 41 00 	call	0x82	; 0x82 <rotateBinary>
  b4:	8f 70       	andi	r24, 0x0F	; 15
  b6:	c8 17       	cp	r28, r24
  b8:	c1 f3       	breq	.-16     	; 0xaa <main+0x12>
			opcode = (0x0F & rotateBinary(PINB >> 4));
  ba:	86 b3       	in	r24, 0x16	; 22
  bc:	82 95       	swap	r24
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	0e 94 41 00 	call	0x82	; 0x82 <rotateBinary>
  c4:	c8 2f       	mov	r28, r24
  c6:	cf 70       	andi	r28, 0x0F	; 15
			PORTD = CONTROL_ROM[opcode];
  c8:	ec 2f       	mov	r30, r28
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	e0 5a       	subi	r30, 0xA0	; 160
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	80 81       	ld	r24, Z
  d6:	82 bb       	out	0x12, r24	; 18
			PORTC = ((CONTROL_ROM[opcode] >> 8) & 0x0F);
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x4a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x50>
  e8:	00 00       	nop
  ea:	df cf       	rjmp	.-66     	; 0xaa <main+0x12>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
