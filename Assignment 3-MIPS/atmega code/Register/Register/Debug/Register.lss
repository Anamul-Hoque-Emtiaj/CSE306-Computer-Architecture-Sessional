
Register.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  0000019a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006aa  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d7  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bd  00000000  00000000  00000ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000359  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d4  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
int main(void)
{
	// Some pins of PORTC can not be used for I/O directly.
	// turn of JTAG to use them
	// o write a 1 to the JTD bit twice consecutively to turn it off
	MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	84 bf       	out	0x34, r24	; 52
  80:	84 bf       	out	0x34, r24	; 52
	DDRA = 0xF0;	// A[0] - WriteReg, A[1] - CLK, A[2] - RESET
  82:	80 ef       	ldi	r24, 0xF0	; 240
  84:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;	// B[3:0] - Write Data, B[7:4] - DstReg
  86:	17 ba       	out	0x17, r1	; 23
	
	DDRC = 0xFF;	// C[3:0] - $1, C[7:4] - $2
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;	// D[3:0] - SrcReg2, D[7:4] - SrcReg1
  8c:	11 ba       	out	0x11, r1	; 17
	
	
	uint8_t src, dst_data, last_control = 0, current_control;
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x18>
				PORTA = (dst_data<<4) & 0xf0;
			}
			_delay_ms(100);
		}
		
		last_control = current_control;
  92:	32 2f       	mov	r19, r18
	
	uint8_t src, dst_data, last_control = 0, current_control;
	
	while (1)
	{
		src = PIND;
  94:	e0 b3       	in	r30, 0x10	; 16
		dst_data = PINB;
  96:	46 b3       	in	r20, 0x16	; 22
		current_control = PINA;
  98:	29 b3       	in	r18, 0x19	; 25
		
		PORTC = (REGISTOR[(src&0x7)]<<4) | (REGISTOR[src>>4]);
  9a:	ae 2f       	mov	r26, r30
  9c:	a7 70       	andi	r26, 0x07	; 7
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	a0 5a       	subi	r26, 0xA0	; 160
  a2:	bf 4f       	sbci	r27, 0xFF	; 255
  a4:	8c 91       	ld	r24, X
  a6:	50 e1       	ldi	r21, 0x10	; 16
  a8:	85 9f       	mul	r24, r21
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
  ae:	e2 95       	swap	r30
  b0:	ef 70       	andi	r30, 0x0F	; 15
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	e0 5a       	subi	r30, 0xA0	; 160
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	90 81       	ld	r25, Z
  ba:	89 2b       	or	r24, r25
  bc:	85 bb       	out	0x15, r24	; 21
		if (current_control&RESET_) {
  be:	22 fd       	sbrc	r18, 2
  c0:	08 c0       	rjmp	.+16     	; 0xd2 <main+0x56>
  c2:	11 c0       	rjmp	.+34     	; 0xe6 <main+0x6a>
			for (uint8_t i=0; i<8; i++) REGISTOR[i] = 0;
  c4:	e8 2f       	mov	r30, r24
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	e0 5a       	subi	r30, 0xA0	; 160
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	10 82       	st	Z, r1
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <main+0x58>
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	b0 f3       	brcs	.-20     	; 0xc4 <main+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	87 ea       	ldi	r24, 0xA7	; 167
  da:	91 e6       	ldi	r25, 0x61	; 97
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x60>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x66>
  e2:	00 00       	nop
			_delay_ms(100);
			continue;
  e4:	d7 cf       	rjmp	.-82     	; 0x94 <main+0x18>
		}
		
		if ((current_control^last_control)&CLK_) {							// EDGE
  e6:	83 2f       	mov	r24, r19
  e8:	82 27       	eor	r24, r18
  ea:	81 ff       	sbrs	r24, 1
  ec:	d2 cf       	rjmp	.-92     	; 0x92 <main+0x16>
			if ((last_control&CLK_) && (last_control&WRITE_REG_)) {	// NEGATIVE EDGE with WRITE INSTRUCTION
  ee:	31 ff       	sbrs	r19, 1
  f0:	10 c0       	rjmp	.+32     	; 0x112 <main+0x96>
  f2:	30 ff       	sbrs	r19, 0
  f4:	0e c0       	rjmp	.+28     	; 0x112 <main+0x96>
				REGISTOR[dst_data>>4] = (dst_data&0x7);
  f6:	e4 2f       	mov	r30, r20
  f8:	e2 95       	swap	r30
  fa:	ef 70       	andi	r30, 0x0F	; 15
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	e0 5a       	subi	r30, 0xA0	; 160
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	84 2f       	mov	r24, r20
 104:	87 70       	andi	r24, 0x07	; 7
 106:	80 83       	st	Z, r24
				PORTA = (dst_data<<4) & 0xf0;
 108:	30 e1       	ldi	r19, 0x10	; 16
 10a:	43 9f       	mul	r20, r19
 10c:	c0 01       	movw	r24, r0
 10e:	11 24       	eor	r1, r1
 110:	8b bb       	out	0x1b, r24	; 27
 112:	87 ea       	ldi	r24, 0xA7	; 167
 114:	91 e6       	ldi	r25, 0x61	; 97
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x9a>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0xa0>
 11c:	00 00       	nop
			}
			_delay_ms(100);
		}
		
		last_control = current_control;
 11e:	32 2f       	mov	r19, r18
 120:	b9 cf       	rjmp	.-142    	; 0x94 <main+0x18>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
